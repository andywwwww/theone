//margins, width, and height of the chart
var margin = {top: 50, right: 30, bottom: 30, left: 40},
    width = 900 - margin.left - margin.right,
    height = 500 - margin.top - margin.bottom;

//create the chart
var chart = d3.select(".chart")
    .attr("width", width + margin.left + margin.right)
    .attr("height", height + margin.top + margin.bottom)
    .append("g")
    .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

//scale of x axis
var x = d3.scale.ordinal()
    .rangeRoundBands([0, width], 0.6);

//scale of y axis
var y = d3.scale.linear()
    .range([height, 0]);

//define axes
var xAxis = d3.svg.axis()
    .scale(x)
    .orient("bottom");

var yAxis = d3.svg.axis()
    .scale(y)
    .orient("left");

//read data and create chart
d3.tsv("histogramdata.tsv", type, function(error, data) {
     
//process data inputs 
  x.domain(data.map(function(d) { return d.letter; }));
  y.domain([0, d3.max(data, function(d) { return d.frequency; })]);


    //define the domains of x and y dimensions
    x.domain(data.map(function(d) { return d.name; }));
    y.domain([0, d3.max(data, function(d) { return d.value; })]);

    //create x axis and place it at the bottom
    chart.append("g")
       .attr("class", "axis")
       .attr("transform", "translate(0," + height + ")")
       .call(xAxis);

    //create y axis
    chart.append("g")
       .attr("class", "axis")
       .call(yAxis);

    //create bars
    chart.selectAll(".bar")
       .data(data)
       .enter().append("rect")
       .attr("class", "bar")
       .attr("x", function(d) { return x(d.name); }) //x position
       .attr("y", function(d) { return y(d.value); })//y position
    //change color
        .on("mouseover", function () {
     d3.select(this).style("fill", "#FF3358" );})
 
        .on("mouseout", function() {
            d3.select(this).style("fill", "#4682b4");
          })
       .attr("height", function(d) { return height - y(d.value); })//size of rect
       .attr("width", x.rangeBand()); //width
})
//print coordinent
d3.select("svg")
 .on("mousedown", function () {
   if(d3.mouse(this)[0]<30) {
/*	var x0 = x.domain(bardata.map(function(d) { return d.name; }));
    d3.selectAll(".bar").attr("x", function(d) { return x0(d.name); });
    d3.select(".xaxis").call(xAxis)

//d3.selectAll('xAxis' +  'yAxis').remove();
//chart.selectAll(".bar").remove();
	 d3.selectAll(".bar").remove()
     d3.select(".xaxis").remove()
*/

 console.log("x: "+d3.mouse(xAxis)[0]+" y: "+d3.mouse(yAxis)[1])}});


/*
d3. select('svg')
    .on("mousedown", function () {
alert('click to sort other');
location.reload();
});*/
//recreate the chart


//read data and create chart
d3.tsv("histogramdata.tsv", type, function(error, data) {
     
//process data inputs
    bardata = data;
    bardata.sort(function(a,b){
return d3.descending(a.value, b.value)});    
  

function type(d) {
    d.value = +d.value; // coerce to number
    return d;
}
